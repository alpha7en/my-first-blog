import config
import szg
import moshu_generator as mg
import trigered as tr
import pixelate
import iskaz
import nalozg
import blackFON
import filterPIL
import os
import draw
import keyboards as kb
import lines
from aiogram import Bot, Dispatcher, executor, types
import logging
from sqlitecontrol import Sqlitecontrol
logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.API_TOKEN)
dp = Dispatcher(bot)
db = Sqlitecontrol('TGBase.db')
#–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ




@dp.callback_query_handler(lambda c: c.data and c.data.startswith('bt'))
async def process_callback_bt_cool(callback_query: types.CallbackQuery):
    code = callback_query.data[-1]
    await bot.answer_callback_query(callback_query.id)
    if code.isdigit():
        code = int(code)
    if db.obr_get(callback_query.from_user.id)==1:
        if code == 1:


            markup1 = types.ReplyKeyboardRemove()
            await bot.send_message(callback_query.from_user.id, '–ù–∞–∂–∞—Ç–∞ –∫—Ä—É—Ç–∞—è –∫–Ω–æ–ø–∫–∞!')
            db.obr_set(callback_query.from_user.id, 0)
            db.like_set(callback_query.from_user.id, 1)
        elif code == 2:



            markup1 = types.ReplyKeyboardRemove()
            await bot.send_message(callback_query.from_user.id, '–ù–∞–∂–∞—Ç–∞ –≥—Ä—É—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞!')
            db.obr_set(callback_query.from_user.id, 0)
            db.like_set(callback_query.from_user.id, -1)
    else:
        await bot.send_message(callback_query.from_user.id, '–ê—Å—É–∂–¥–∞—é –¥–≤–æ–π–Ω—ã–µ –Ω–∞–∂–∞—Ç–∏—è!')





@dp.callback_query_handler(lambda c: c.data and c.data.startswith('c'))
async def process_callback_l(callback_query: types.CallbackQuery):
    code = callback_query.data[1:]
    await bot.answer_callback_query(callback_query.id)
    if db.status_get(callback_query.from_user.id) == 2:
        await bot.delete_message(callback_query.from_user.id, int(db.get_args(callback_query.from_user.id)[3]))

        markup1 = types.ReplyKeyboardRemove()
        db.status_set(callback_query.from_user.id, 3)
        db.set_args(callback_query.from_user.id, 1, code)
        mas = db.get_args(callback_query.from_user.id)
        filterPIL.filter(str(callback_query.from_user.id) + '.jpg')
        draw.dr((str(callback_query.from_user.id) + '.jpg'), db.get_name(callback_query.from_user.id), mas)
        f = open(str(callback_query.from_user.id) + '.jpg', "rb")
        await Bot.send_photo(self=bot, chat_id=callback_query.from_user.id, photo=f)

        await bot.send_message(callback_query.from_user.id, '–Ω—É –∫–∞–∫?', reply_markup=kb.greet_kb)
        db.obr_set(callback_query.from_user.id, 1)
        os.remove(str(callback_query.from_user.id) + '.jpg')
        # await bot.send_photo(message.from_user.id, im)
    elif(db.status_get(callback_query.from_user.id) == 30):
        db.set_args(callback_query.from_user.id, 1, code)
        await bot.send_message(callback_query.from_user.id, "–≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –≤–µ—Ä—Ö–Ω–µ–π —Å—Ç—Ä–æ–∫–∏ üëΩ")
        db.status_set(callback_query.from_user.id, 31)
    else:
        await bot.send_message(callback_query.from_user.id, '–ê—Å—É–∂–¥–∞—é –Ω–µ–Ω—É–∂–Ω—ã–µ –Ω–∞–∂–∞—Ç–∏—è!')

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('l'))
async def process_callback_c(callback_query: types.CallbackQuery):
    code = callback_query.data[1:]
    await bot.answer_callback_query(callback_query.id)
    if code == '2':
        await bot.send_message(callback_query.from_user.id, "–≤–≤–µ–¥–∏ —Ä–∞–∑–º–µ—Ä –ø–æ–¥–ø–∏—Å–∏\n(0 –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–∞)\n(—Ä–µ–∫–æ–º–µ–Ω–¥—É—é 50)")
        db.status_set(callback_query.from_user.id, 1)
    elif code == '1':
        await bot.send_message(callback_query.from_user.id, "–≤–≤–µ–¥–∏ —Å–ª–æ–≤–æ")
        db.status_set(callback_query.from_user.id, 10)
    elif code == '3':
        await bot.send_message(callback_query.from_user.id, "–≤–≤–µ–¥–∏ —Å—Ç–µ–ø–µ–Ω—å –ø–∏–∫—Å–µ–ª–∏–∑–∞—Ü–∏–∏ (–ø–æ–ø—Ä–æ–±—É–π 16) ü¶ç")
        db.status_set(callback_query.from_user.id, 20)
    elif code == '4':
        tr.r(str(callback_query.from_user.id) + '.jpg')
        f = open(str(callback_query.from_user.id) + '.jpg', "rb")
        await bot.send_photo( callback_query.from_user.id, photo=f)
        os.remove(str(callback_query.from_user.id) + '.jpg')
        await bot.delete_message(callback_query.from_user.id, int(db.get_args(callback_query.from_user.id)[3]))
        await bot.send_message(callback_query.from_user.id, '–Ω—É –∫–∞–∫?', reply_markup=kb.greet_kb)
        db.obr_set(callback_query.from_user.id, 1)
    elif code == '5':
        db.status_set(callback_query.from_user.id, 30)
        await bot.send_message(callback_query.from_user.id, '–∫–∞–∫–æ–π —Ü–≤–µ—Ç –ø–æ–¥–ø–∏—Å–∏?', reply_markup=kb.c_kb)
    elif code == '6':
        await bot.send_message(callback_query.from_user.id, '—Å–ª–µ–≤–∞ –∏–ª–∏ —Å–ø—Ä–∞–≤–∞?', reply_markup=kb.moshu_kb)
    elif code == '7':
        iskaz.r(str(callback_query.from_user.id) + '.jpg')
        f = open(str(callback_query.from_user.id) + '.jpg', "rb")
        await bot.send_photo( callback_query.from_user.id, photo=f)
        os.remove(str(callback_query.from_user.id) + '.jpg')
        await bot.delete_message(callback_query.from_user.id, int(db.get_args(callback_query.from_user.id)[3]))
        await bot.send_message(callback_query.from_user.id, '–∫–∞–∫ –ø–æ –º–Ω–µ –ø–æ–ª–Ω—ã–π —Ä–æ—Ñ–ª, –∞ —Ç–µ–±–µ –∫–∞–∫?', reply_markup=kb.greet_kb)
        db.obr_set(callback_query.from_user.id, 1)
    elif code == '8':
        db.status_set(callback_query.from_user.id, 45)
        await bot.delete_message(callback_query.from_user.id, int(db.get_args(callback_query.from_user.id)[3]))
        await bot.send_message(callback_query.from_user.id, '–∞ —á—Ç–æ —Å–≤–µ—Ä—Ö—É?')
    elif code == '9':
        db.obr_set(callback_query.from_user.id, 50)
        await bot.send_message(callback_query.from_user.id, 'kak delaem?', reply_markup=kb.szg_kb)


    #await bot.edit_message_reply_markup(callback_query.id, message_id = callback_query.message.message_id-1, reply_markup = '')
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('q'))
async def szg_otvet(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    code = callback_query.data[1:]
    if code == '1':
        szg.r(str(callback_query.from_user.id) + '.jpg', 1)
        f = open(str(callback_query.from_user.id) + '.jpg', "rb")
        await bot.send_photo( callback_query.from_user.id, photo=f)
        os.remove(str(callback_query.from_user.id) + '.jpg')
        await bot.delete_message(callback_query.from_user.id, int(db.get_args(callback_query.from_user.id)[3]))
        await bot.send_message(callback_query.from_user.id, 'nycho?', reply_markup=kb.greet_kb)
        db.obr_set(callback_query.from_user.id, 1)
    else:
        szg.r(str(callback_query.from_user.id) + '.jpg', 2)
        f = open(str(callback_query.from_user.id) + '.jpg', "rb")
        await bot.send_photo( callback_query.from_user.id, photo=f)
        os.remove(str(callback_query.from_user.id) + '.jpg')
        await bot.delete_message(callback_query.from_user.id, int(db.get_args(callback_query.from_user.id)[3]))
        await bot.send_message(callback_query.from_user.id, 'nycho?', reply_markup=kb.greet_kb)
        db.obr_set(callback_query.from_user.id, 1)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('m'))
async def process_callback_c(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    code = callback_query.data[1:]
    if code == '1':
        mg.r(str(callback_query.from_user.id) + '.jpg', True)
        f = open(str(callback_query.from_user.id) + '.jpg', "rb")
        await bot.send_photo( callback_query.from_user.id, photo=f)
        os.remove(str(callback_query.from_user.id) + '.jpg')
        await bot.delete_message(callback_query.from_user.id, int(db.get_args(callback_query.from_user.id)[3]))
        await bot.send_message(callback_query.from_user.id, '–Ω—É –∫–∞–∫?', reply_markup=kb.greet_kb)
        db.obr_set(callback_query.from_user.id, 1)
    else:
        mg.r(str(callback_query.from_user.id) + '.jpg')
        f = open(str(callback_query.from_user.id) + '.jpg', "rb")
        await bot.send_photo( callback_query.from_user.id, photo=f)
        os.remove(str(callback_query.from_user.id) + '.jpg')
        await bot.delete_message(callback_query.from_user.id, int(db.get_args(callback_query.from_user.id)[3]))
        await bot.send_message(callback_query.from_user.id, '–Ω—É –∫–∞–∫?', reply_markup=kb.greet_kb)
        db.obr_set(callback_query.from_user.id, 1)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    markdown = """
            *bold text*
            _italic text_
            [text](URL)
            """
    await message.answer("*–ü—Ä–∏–≤–µ—Ç*. –Ø –ø–æ—Å–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–ª–∞—Å—Å–Ω—ã–µ –º–µ–º—ã *–±–µ–∑ –≤—Å—è–∫–∏—Ö —É—Å–∏–ª–∏–π.*\n –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ—ë –∏–º—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∏.\n –≤–æ—Ç —Ç–∞–∫: setname (–∏–º—è)\n –ó–∞—Ç–µ–º –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ—ë —Ñ–æ—Ç–æ –¥–ª—è –º–µ–º–∞ –∏ –≤—ã–±–∏—Ä–∞—Ç—å —Ä–µ–∂–∏–º—ã\n –Ω–∞–ø–∏—à–∏ /myrate –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ *–æ—Ü–µ–Ω–∫–∏* –º–æ–µ–π —Ä–∞–±–æ—Ç—ã \n \n [–º–æ–π –∫–∞–Ω–∞–ª](https://www.youtube.com/channel/UCMBxOvbDi8qN81yT8NmmeXw) \n–Ω–∞–ø–∏—à–∏ /rename _(–∏–º—è)_ –∏ *—Å–º–µ–Ω–∏* —Å–≤–æ—ë –∏–º—è\n [–Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ](t.me/@Alpha7en)", parse_mode="Markdown")

@dp.message_handler(commands=['printfall'])
async def start(message: types.Message):
    await message.answer(db.printf())


@dp.message_handler(commands=['myrate'])
async def my_rate(message: types.Message):
    markdown = """
        *bold text*
        _italic text_
        [text](URL)
        """
    await message.answer(('_–≤–∞—à —Å—á—ë—Ç:_  *' + str(db.like_get(message.from_user.id)) + '*'),parse_mode="Markdown")

@dp.message_handler(commands=['help'])
async def help(message: types.Message):
    db.status_set(message.from_user['id'],0)
    markdown = """
                *bold text*
                _italic text_
                [text](URL)
                """
    await message.answer("*–ü—Ä–∏–≤–µ—Ç*. –Ø –ø–æ—Å–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–ª–∞—Å—Å–Ω—ã–µ –º–µ–º—ã _–±–µ–∑ –≤—Å—è–∫–∏—Ö —É—Å–∏–ª–∏–π._\n –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ—ë –∏–º—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∏.\n –≤–æ—Ç —Ç–∞–∫: /setname (–∏–º—è) \n–ó–∞—Ç–µ–º –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ—ë —Ñ–æ—Ç–æ –¥–ª—è –º–µ–º–∞\n –Ω–∞–ø–∏—à–∏ /myrate –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ _–æ—Ü–µ–Ω–∫–∏_ –º–æ–µ–π —Ä–∞–±–æ—Ç—ã \n \n [–º–æ–π –∫–∞–Ω–∞–ª](https://www.youtube.com/channel/UCMBxOvbDi8qN81yT8NmmeXw) \n [–Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ](t.me/@Alpha7en)", parse_mode="Markdown")


@dp.message_handler(commands=['rename'])
async def help(message: types.Message):
    db.status_set(message.from_user['id'],0)
    markdown = """
                *bold text*
                _italic text_
                [text](URL)
               """



    if db.get_args(message.from_user['id'])[2] == '1':

        db.set_name(tg_id=message.from_user['id'], name=message.get_args())
        await message.answer("*zapomnil*", parse_mode="Markdown")
    else:
        await message.answer("*—Ä–µ—à–∏–ª –∏–º–µ—á–∫–æ —Å–º–µ–Ω–∏—Ç—å?* —è –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ _–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –µ–≥–æ_ –∏ —Å–º–æ–∂–µ—à—å –º–µ–Ω—è—Ç—å –∏–º—è", parse_mode="Markdown")
        db.status_set(message.from_user['id'],39)


@dp.message_handler(commands=['setname'])
async def set_name(message: types.Message):
    print(message.from_user['id'])
    print(message.get_args())
    if message.get_args() == '' or None:
        await message.answer("—ç–º–º–º. –ü—É—Å—Ç–æ –∫–∞–∫-–±—ã!")
    elif(db.exists(message.from_user['id']) == None):
        db.add_name(tg_id=message.from_user['id'], name=message.get_args())
        await message.answer("—è —Ç–µ–±—è –∑–∞–ø–æ–º–Ω—é, –º–æ–∂–µ—à—å —Å–∫–∏–Ω—É—Ç—å —Ñ–æ—Ç–æ")
    else:
        await message.answer("—ç–º–º–º, —è —Ç–µ–±—è –∏ —Ç–∞–∫ –∑–Ω–∞—é, –Ω–æ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–º–µ–Ω–∏—Ç—å –∏–º—è –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /rename")

@dp.message_handler(content_types=['photo'])
async def photoes(message):
    if(db.exists(message.from_user['id']) == None):
        await message.answer("–ê–°–£–ñ–î–ê–Æ, –º–æ–∂–µ—Ç –∏–º—è –≤–≤–µ–¥–µ—à—å? \n setname (–∏–º—è)")
    else:
        try:
            os.remove(str(callback_query.from_user.id) + '.jpg')
        except:
            pass
        if db.status_get(message.from_user['id']) ==45:
            await message.photo[-1].download(str(message.from_user['id'])+'v.jpg')
            nalozg.r(str(message.from_user['id'])+'.jpg')
            f = open(str(message.from_user['id']) + '.jpg', "rb")
            await Bot.send_photo(self=bot, chat_id=message.from_user['id'], photo=f)
            os.remove(str(message.from_user['id']) + '.jpg')
            db.status_set(message.from_user['id'],0)
            await bot.send_message(message.from_user['id'], '–Ω—É –∫–∞–∫?', reply_markup=kb.greet_kb)
            db.obr_set(message.from_user['id'], 1)
            db.status_set(message.from_user['id'],0)
        else:
            await message.photo[-1].download(str(message.from_user['id'])+'.jpg')
            message_info = await message.answer("–≤—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:", reply_markup=kb.l_kb)
            db.set_args(message.from_user['id'], 3, message_info['message_id'])

@dp.message_handler(content_types=['text'])
async def all_mess(message):
    if db.status_get(message.from_user['id']) == 39:
        var = ("–∞—Å—É–∂–¥–∞—é", "–æ—Å—É–∂–¥–∞—é", "–ê—Å—É–∂–¥–∞—é", "–û—Å—É–∂–¥–∞—é","–∞—Å—É–∂–¥–∞—é!", "–æ—Å—É–∂–¥–∞—é!", "–ê—Å—É–∂–¥–∞—é!", "–û—Å—É–∂–¥–∞—é!")
        if message.text in var:
            await bot.send_message(message.from_user['id'], '–°–ï–ë–Ø –û–°–£–î–ò!')
        if message.text == '39':
            await bot.send_message(message.from_user['id'], '–∞ —Ç—ã —è —Å–º–æ—Ç—Ä—é —à–∞—Ä–∏—à—å, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —É–≥–∞–¥–∞–ª. –†–∞–∑—Ä–µ—à–∞—é –ø–∏—Å–∞—Ç—å /rename (–Ω–æ–≤–æ–µ –∏–º—è)')
            db.set_args(message.from_user['id'], 2, 1)

    if db.status_get(message.from_user['id']) == 1:
        try:
            it = int(message.text)
            if it != 0:
                await bot.send_message(message.from_user['id'], '–∫–∞–∫–æ–π —Ü–≤–µ—Ç –ø–æ–¥–ø–∏—Å–∏?', reply_markup=kb.c_kb)
                db.status_set(message.from_user['id'], 2)
                db.set_args(message.from_user['id'], 0,str(it))
            else:
                markup1 = types.ReplyKeyboardRemove()
                db.status_set(message.from_user['id'], 3)
                filterPIL.filter(str(message.from_user['id']) + '.jpg')

                f = open(str(message.from_user['id']) + '.jpg', "rb")
                await Bot.send_photo(self=bot, chat_id=message.from_user['id'], photo=f)
                await bot.delete_message(message.from_user['id'], int(db.get_args(message.from_user['id'])[3]))
                await bot.send_message(message.from_user['id'], '–Ω—É –∫–∞–∫?', reply_markup=kb.greet_kb)
                db.obr_set(message.from_user['id'], 1)
                os.remove(str(message.from_user['id']) + '.jpg')


        except Exception as exc:
            await bot.send_message(message.from_user['id'], '–º–æ–∂–µ—Ç —á–∏—Å–ª–æ –≤–≤–µ–¥—ë—à—å ?')
            print(exc)
    if db.status_get(message.from_user['id']) == 10:

        it = (message.text)

        blackFON.r(str(message.from_user['id']) + '.jpg', it)
        f = open(str(message.from_user['id']) + '.jpg', "rb")
        await Bot.send_photo(self=bot, chat_id=message.from_user['id'], photo=f)
        os.remove(str(message.from_user['id']) + '.jpg')
        await bot.delete_message(message.from_user['id'], int(db.get_args(message.from_user['id'])[3]))
        await bot.send_message(message.from_user['id'], '–Ω—É –∫–∞–∫?', reply_markup=kb.greet_kb)
        db.obr_set(message.from_user['id'], 1)

    if db.status_get(message.from_user['id']) == 20:
        try:
            it = int(message.text)
            pixelate.r(str(message.from_user['id']) + '.jpg', it)
            f = open(str(message.from_user['id']) + '.jpg', "rb")
            await Bot.send_photo(self=bot, chat_id=message.from_user['id'], photo=f)
            os.remove(str(message.from_user['id']) + '.jpg')
            await bot.delete_message(message.from_user['id'], int(db.get_args(message.from_user['id'])[3]))
            await bot.send_message(message.from_user['id'], '–Ω—É –∫–∞–∫?', reply_markup=kb.greet_kb)
            db.obr_set(message.from_user['id'], 1)


        except Exception as exc:
            await bot.send_message(message.from_user['id'], '–∞—Å—É–∂–¥–∞—é! –ú–æ–∂–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ß–ò–°–õ–û –≤–≤–µ–¥—ë—à—å ?')
            print(exc)

    if db.status_get(message.from_user['id']) == 31:
        it = (message.text)
        await bot.send_message(message.from_user['id'], '—Ç–µ–ø–µ—Ä—å –Ω–∏–∂–Ω—é—é —Å—Ç—Ä–æ—á–∫—É')
        db.status_set(message.from_user['id'], 32)
        db.set_args(message.from_user['id'], 0, str(it))
        return
    if db.status_get(message.from_user['id']) == 32:
        it = (message.text)
        lines.generate_meme(str(message.from_user['id']) + '.jpg', db.get_args(message.from_user['id'])[0], it,  db.get_args(message.from_user['id'])[1])
        f = open(str(message.from_user['id']) + '.jpg', "rb")
        await Bot.send_photo(self=bot, chat_id=message.from_user['id'], photo=f)
        os.remove(str(message.from_user['id']) + '.jpg')
        await bot.delete_message(message.from_user['id'], int(db.get_args(message.from_user['id'])[3]))
        await bot.send_message(message.from_user['id'], '–Ω—É –∫–∞–∫?', reply_markup=kb.greet_kb)
        db.obr_set(message.from_user['id'], 1)

if __name__ == '__main__':
    mode = 0
    if mode == 1:
        try:
            executor.start_polling(dp, skip_updates=True)
        except:
            pass
    else:
        executor.start_polling(dp, skip_updates=True)